class Solution {
    public int shortestBridge(int[][] A) {
        //Four directions
        int [][] direction = new int [][]{{1,0},{-1,0},{0,1},{0,-1}};
        //Used for BFS, to store the nodes
        Deque<int []> queue = new ArrayDeque<>();
        //This is the result
        int ans = -1;
        //a array to store whether this node has been visited 
        boolean [][] visited = new boolean[A.length][A[0].length];
        //We only need to find only one island, so after first loop and find the first island, we can change it to false to stop to find the other island
        boolean flag = true;
        for(int i=0;i<A.length && flag ; i++){
            for(int j=0; j<A[0].length; j++) {
                if (A[i][j] == 1) {
                    dfs(  A, i, j, queue, visited);
                    flag = false;
                    break;
                }
            }
        }
        while (!queue.isEmpty()){
            int size = queue.size();
            ans++;
            for(int i=0;i<size;i++){
                int []node = queue.poll();
                for(int j=0;j<4;j++){
                    int  nx = node[0]+direction[j][0];
                    int ny = node[1]+direction[j][1];
                    //meet the base case or this node has been visited
                    if(nx<0||nx>=A.length||ny<0||ny>=A[0].length||visited[nx][ny])    continue;
                    //if we find a element which value is 1 means the two island has been connected
                    if(A[nx][ny]==1)    return ans;
                    //Keep changing the visited array, and we cannot change the original visited array because it stores the value of the first island we find
                    visited[nx][ny] = true;
                    //bfs, add from back
                    queue.add(new int []{nx,ny});
                }
            }
        }
        return ans;
    }
    private void dfs(int [][]A,int i,int j,Deque queue,boolean[][]visited){
        if(i<0||i>=A.length||j<0||j>=A[0].length||visited[i][j]||A[i][j]!=1)    return;
        visited[i][j] = true;
        queue.add(new int []{i,j});
        dfs( A, i-1, j, queue, visited);
        dfs( A, i+1, j, queue, visited);
        dfs( A, i, j-1, queue, visited);
        dfs( A, i, j+1, queue, visited);
        
    }
}
