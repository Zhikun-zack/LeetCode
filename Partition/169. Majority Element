class Solution {
    /*
    Partition

    basic theory:
    if val is the majority element
    then val is the majority element of one of the left or right part
    Because just assume that this theory is not true:
        so val is the majority but not the majority of left or right
        but if val is not the majority of left: #val < left/2
        and #val < right/2
        if that happened then the whole number of val will be less than nums/2
        then val can not be majority in nums
    
    Based on that we can seperate the array into two part
    find each part's majority element
    if these two ele are equal return this element
    if not compare the number of each element in this array

    T Com: O(nlogn)
    S Com: O(logn)
    */
    public int majorityElement(int[] nums) {
        return partition(nums, 0, nums.length-1);
    }
    public int partition(int[] nums, int l, int r){
        if(l == r) return nums[l];

        int mid = (l+r) >> 1;
        int left = partition(nums, l, mid);
        int right = partition(nums, mid+1, r);
        if(left == right) return left;

        int leftCount = countVar(nums, l, r, left);
        int rightCount = countVar(nums, l, r, right);

        return leftCount>rightCount? left: right;
    }

    public int countVar(int[] nums, int l, int r, int val){
        int res = 0;
        for(int i = l; i <= r; i++){
            if(nums[i] == val){
                res++;
            }
        }
        return res;
    }
}
