class Solution:
    def longestPalindrome(self, s: str) -> str:
        n = len(s)
        dp = [[False] * n for i in range(n)]
        res = ""
        maxLen = 0
        start = 0
        end = 0
        for i in range(n):
            dp[i][i] = True
        #order of i and j are important, we need to make sure that the dp[i+1][j-1] is update before we visit dp[i][j]
        #because we use i - 1 j + 1 to get the value of i j, so we need loop using reverse order or using len loop. from 0 to len will not working
        for i in range(n):
            for j in range(i+1, n):
                if i+1 == j:
                    dp[i][j] = (s[i] == s[j])
                else:
                    print(i)
                    print(j)
                    dp[i][j] = (dp[i+1][j-1] and s[i] == s[j])
        
                if (dp[i][j] == True and maxLen < (j - i +1)):
                    maxLen = j - i + 1
                    start = i
                    end = j
        print(dp)
        print(start)       
        return s[start:end+1]
                
