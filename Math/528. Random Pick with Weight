class Solution {
    /*
    Binary Search

    using length to represent the probability
        like is nums[] is [1,3] then when random value in range of (0,1], result will be 0, when in (1,3], result will be 1
    we need to create another data structure to store the end of each range
    then using binary search find the location
    */
    List<Integer> wList = new ArrayList<>();
    int sum;

    public Solution(int[] w) {
        // like if w is [1,2,3], we can create a line : [0, 1): 0 (when random val is 0)
        //                                              [1, 3): 1 (when random val is 1,2)
        //                                              [3, 6): 2 (when random val is 3,4,5)
        //wList will store all the end points(1,3,6)
        for(int i: w){
            sum+= i;
            wList.add(sum);
        }
    }
    
    public int pickIndex() {
        Random rand = new Random();
        //choose random value from range[0, sum)
        int randIndex = rand.nextInt(sum) + 1;
    
        int l = 0, r = wList.size() - 1;

        while(l <= r){
            int mid = l+(r-l)/2;
            if(randIndex > wList.get(mid)){
                l = mid+1;
            }else if(randIndex == wList.get(mid)){
                return mid;
            }else r = mid-1;
        }
        return l;
    }
}

/**
 * Your Solution object will be instantiated and called as such:
 * Solution obj = new Solution(w);
 * int param_1 = obj.pickIndex();
 */
