/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {
    /*
    Reservoir Sampling

    O(n)
    
    */
    private Random rand;
    private ListNode head;
    /** @param head The linked list's head.
        Note that the head is guaranteed to be not null, so it contains at least one node. */
    public Solution(ListNode head) {
        this.head = head;
        this.rand = new Random();
    }
    
    /** Returns a random node's value. */
    public int getRandom() {
        ListNode node = head;
        int val = 0;
        int cLen = 0;
        while(node != null){
            if(rand.nextInt(++cLen) == 0){
                val = node.val;
            }
            node = node.next;
        }
        //you need to return the value at the current location, but if you use node.val after the loop, the pointer will go to the next, so the val will be the next node's val, so you need to store the val each time
        //System.out.println(node.val);
        return val;
    }
}

/**
 * Your Solution object will be instantiated and called as such:
 * Solution obj = new Solution(head);
 * int param_1 = obj.getRandom();
 */
