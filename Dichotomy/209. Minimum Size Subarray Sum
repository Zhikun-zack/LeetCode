/*
Double pointer method:
T: O(nlogn)
S: O(n)
https://leetcode-cn.com/problems/minimum-size-subarray-sum/solution/chang-du-zui-xiao-de-zi-shu-zu-by-leetcode-solutio/
*/
class Solution {
    public int minSubArrayLen(int s, int[] nums) {
        int n = nums.length;
        if (n == 0) {
            return 0;
        }
        int ans = Integer.MAX_VALUE;
        int[] sums = new int[n + 1]; 
        // 为了方便计算，令 size = n + 1 
        // sums[0] = 0 意味着前 0 个元素的前缀和为 0
        // sums[1] = A[0] 前 1 个元素的前缀和为 A[0]
        // 以此类推
        for (int i = 1; i <= n; i++) {
            sums[i] = sums[i - 1] + nums[i - 1];
        }
        for (int i = 1; i <= n; i++) {
            int target = s + sums[i - 1];
            //We can use binarySearch
            int bound = Arrays.binarySearch(sums, target);
            if (bound < 0) {
                bound = -bound - 1;
            }
            if (bound <= n) {
                ans = Math.min(ans, bound - (i - 1));
            }
        }
        return ans == Integer.MAX_VALUE ? 0 : ans;
    }
}

/*
Two Pointer method:
    create two pointers start and end
    fix start move end
    calculate sum, if sum > target(because we may move start several time, so we need a while loop not if)
    update length, sum - nums[start], move start++ 
    if not end ++
T Com: O(n)
S Com: O(1)
*/
class Solution {
    public int minSubArrayLen(int target, int[] nums) {
        int start = 0, end = 0;
        int sum = 0;
        int len = nums.length;
        //first of all, res must be some larger value because we will need min() latter
        //then if we give initial res = len, two conditions will have same value: 1. no such subarray that meet the requirement; 2. the only one subarray that meet requirement is itself e.g.: 7 [1,1,1,1,1,1,1] 
        //so we just need to give res some value which is larger that the max value it can get
        int res = len+1;
        while(end < len){
            sum += nums[end];
            while(sum >= target){
                sum -= nums[start];
                res = Math.min(res, end-start+1);
                start++;
            }
            end++;
        }
        //if res == len+1 measn no subarray meet the requirement in two while loop, return 0
        return res == len+1 ? 0 : res;
    }
}
