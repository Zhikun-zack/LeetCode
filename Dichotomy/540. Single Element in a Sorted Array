/*
Four situations:
1. nums[mid] == nums[mid-1] and number of former part is odd 
    former does not have single value
    l = mid + 1 
2. nums[mid] == nums[mid-1] and number of former part is even
    has single value
    r = mid - 2
3.  nums[mid] == nums[mid+1] and number of former part is odd
    former has single value 
    l = mid+1
4.  nums[mid] == nums[mid+1] even
    former doesnot have single value 
    r = mid -2
if return nothing after whole loop
which means l == r
return nums[l] or nums[r] is ok

*/
class Solution {
    public int singleNonDuplicate(int[] nums) {
        int l = 0;
        int r = nums.length-1;
        while(l < r){
            int mid = l + (r-l)/2;
            boolean isEven = (r-mid)%2 == 0;
            if( nums[mid+1] == nums[mid]){
                if(isEven){
                    l = mid +2;
                }else{
                    r = mid - 1;   
                }
            }else if(nums[mid-1] == nums[mid]){
                if(isEven){
                    r = mid -2;
                }else{
                    l = mid+1;
                }
            }else{
                return nums[mid];
            }
        }
        return nums[l];
    }
}
