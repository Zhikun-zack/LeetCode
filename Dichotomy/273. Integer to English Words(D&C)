class Solution:
    #Divide and Conquer
    '''
    Divide the whole number to several parts, each len 3
    num = 1234567891 
          1.234.567.891
          1: billion
          234 million
          567 thousand
          891
    '''
    #for number < 10
    def numberToWords(self, num: int) -> str:
        def one(num):
            oneHash= {
                1: "One",
                2: "Two",
                3: "Three",
                4: "Four",
                5: "Five",
                6: "Six",
                7: "Seven",
                8: "Eight",
                9: "Nine"
            }
            return oneHash.get(num)
        #for number [10, 20)
        def two(num):
            twoHash= {
                10: "Ten",
                11: "Eleven",
                12: "Twelve",
                13: "Thirteen",
                14: "Fourteen",
                15: "Fifteen",
                16: "Sixteen",
                17: "Seventeen",
                18: "Eighteen",
                19: "Nineteen"
            }
            return twoHash.get(num)
        #for number [20, 100)
        def largerTwenty(num):
            l_twentyHash={
                2: "Twenty",
                3: "Thirty",
                4: "Forty",
                5: "Fifty",
                6: "Sixty",
                7: "Seventy",
                8: "Eighty",
                9: "Ninety"
            }
            return l_twentyHash.get(num)
        #return the value when the value only have two bits
        def twoBits(num):
            if not num:
                return ""
            elif num < 10:
                return one(num)
            elif num < 20:
                return two(num)
            else:
                tenner = num//10
                rest = num - tenner*10

                tenEng = largerTwenty(tenner)
                oneEng = one(rest)
                return tenEng + " " + oneEng if rest else tenEng
        #Final execution function, using the twoBits and return the result of all the situation, no matter two bits or three bits
        def threeBits(num):
            if not num:
                return ""
            elif num < 100:
                return twoBits(num)
            else:
                hundred = num//100
                rest = num % 100
                if hundred and rest:
                    return one(hundred) + " Hundred " + twoBits(rest)
                elif hundred and not rest:
                    return one(hundred) + " Hundred"
        #Divide
        billion = num // 1000000000
        million = (num - billion*1000000000) // 1000000
        thousand = (num - billion*1000000000 - million*1000000) // 1000
        rest = num - billion*1000000000 - million*1000000 - thousand*1000
        
        if not num:
            return "Zero"
        
        result = ""
        if billion:
            result += threeBits(billion) + " Billion"
        if million:
            result += " " if result else ""
            result += threeBits(million) + " Million"
        if thousand:
            result += " " if result else ""
            result += threeBits(thousand) + " Thousand"
        if rest:
            result += " " if result else ""
            result += threeBits(rest)
        return result
            
                    
                
