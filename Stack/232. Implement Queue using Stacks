class MyQueue {
    /*
    Queue

    How to create stack
    How to combine two stacks to the queue class
    How to use to stacks to simulate the first in first out

    push
        just push values into the inStack
    pop
        only when outStack is empty, do we need to input elements from inStack to outStack
        (two first in last out == one first in first out)
        when outStack is empty
        import all elements from inStack to outStack
        then do the normal pop action until it is empty
    peek
        same as pop
    empty:
        only when inStack and outStack are all empty 
        it should be empty
    */
    Deque<Integer> inStack;
    Deque<Integer> outStack;
    /** Initialize your data structure here. */
    public MyQueue() {
       inStack = new LinkedList<>();
       outStack = new LinkedList<>();
    }
    
    /** Push element x to the back of queue. */
    public void push(int x) {
        inStack.push(x);
    }
    
    /** Removes the element from in front of queue and returns that element. */
    public int pop() {
        if(outStack.isEmpty()){
            while(!inStack.isEmpty()){
                outStack.push(inStack.pop());
            }
        }
        return outStack.pop();
    }
    
    /** Get the front element. */
    public int peek() {
        if(outStack.isEmpty()){
            while(!inStack.isEmpty()){
                outStack.push(inStack.pop());
            }
        }
        return outStack.peek();
    }
    
    /** Returns whether the queue is empty. */
    public boolean empty() {
        return inStack.isEmpty() && outStack.isEmpty();
    }
}

/**
 * Your MyQueue object will be instantiated and called as such:
 * MyQueue obj = new MyQueue();
 * obj.push(x);
 * int param_2 = obj.pop();
 * int param_3 = obj.peek();
 * boolean param_4 = obj.empty();
 */
