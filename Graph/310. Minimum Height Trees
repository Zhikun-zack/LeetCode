class Solution {
    /*
    BFS in graph
    */
    //https://leetcode-cn.com/problems/minimum-height-trees/solution/zui-rong-yi-li-jie-de-bfsfen-xi-jian-dan-zhu-shi-x/
    public List<Integer> findMinHeightTrees(int n, int[][] edges) {
        int[] degree = new int[n];
        List<List<Integer>> map = new ArrayList<>();
        List<Integer> res = new ArrayList<>();

        if(n == 1) {
            res.add(0);
            return res;
        }
        for(int i = 0; i < n; i++){
            map.add(new ArrayList<>());
        }

        for(int[] edge: edges){
            degree[edge[0]]++;
            degree[edge[1]]++;
            map.get(edge[0]).add(edge[1]);
            map.get(edge[1]).add(edge[0]);
        }

        Deque<Integer> dq = new LinkedList<>();
        for(int i = 0; i < n; i++){
            if(degree[i] == 1){
                dq.offer(i);
            }
        }
        while(!dq.isEmpty()){
            res = new ArrayList<>();
            int size = dq.size();
            for(int j = 0; j < size; j++){
                int node = dq.poll();
                res.add(node);
                List<Integer> neighbors = map.get(node);
                for(int neighbor: neighbors){
                    degree[neighbor]--;
                    if(degree[neighbor] == 1){
                        dq.offer(neighbor);
                    }
                }
            }
        }
        return res;
    }
}
