#T Com: O(3^M * 4^N) m is the number of digit with three letters and n is the number of 4 letters
#S Com: O(3^M * 4^N)
class Solution:
    def letterCombinations(self, digits: str) -> List[str]:
        phone = {'2':['a','b','c'],
                 '3':['d','e','f'],
                 '4':['g','h','i'],
                 '5':['j','k','l'],
                 '6':['m','n','o'],
                 '7':['p','q','r','s'],
                 '8':['t','u','v'],
                 '9':['w','x','y','z']}
        if len(digits) == 0:
            return []
        def backTracking (combinatin, nextDigit):
            if len(nextDigit) == 0:
                res.append(combinatin)
            else:
                for letter in phone[nextDigit[0]]:
                    backTracking(combinatin+letter, nextDigit[1:])

        res = []
        backTracking('', digits)
        return res
