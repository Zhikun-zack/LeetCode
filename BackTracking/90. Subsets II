class Solution {
    /*
    Back tracking

    Must not contain duplicate subsets
        so we need cut branches
        so have to sort the arrays first
    When the number we chose is not the starter and it is equals to the former one
        cut this branch
    */
    public List<List<Integer>> subsetsWithDup(int[] nums) {
        List<List<Integer>> res = new ArrayList<>();
        List<Integer> state = new ArrayList<>();
        Arrays.sort(nums);

        backTrack(res, state, nums, 0);

        return res;
    }
    public void backTrack(List<List<Integer>> res, List<Integer> state, int[] nums, int starter){
        //add whatever results into the arrays, no base case
        res.add(new ArrayList(state));

        for(int j = starter; j < nums.length; j++){
            if(j == starter || j >= 1 && nums[j] != nums[j-1] ){
                state.add(nums[j]);
                backTrack(res, state, nums, j+1);
                state.remove(state.size() - 1);
            }
        }
    }
}
