# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, val=0, left=None, right=None):
#         self.val = val
#         self.left = left
#         self.right = right

#Inorder traversal
#left < root < right so inorder traversal result will be increasing order
#so if the former one can always less than the latter one, then return True
class Solution:
    def isValidBST(self, root: TreeNode) -> bool:
        stack, inorder = [], float("-inf")
        
        while stack or root:
            while root:
                stack.append(root)
                root = root.left
            #root is None now, then we need give new value
            root = stack.pop()
            if root.val <= inorder:
                return False
            inorder = root.val
            root = root.right
        return True
            
