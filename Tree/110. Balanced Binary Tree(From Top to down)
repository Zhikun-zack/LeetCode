/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    /*
    Tree

    From top to bottom

    create a function to calculate the height of left and right, and return the larger one
    iterate

    T Com: On2
    S Com: On( you should create at least a tree )
    */
    public boolean isBalanced(TreeNode root) {
        if(root == null){
            return true;
        }else{
            return (Math.abs(height(root.left) - height(root.right))<= 1 && isBalanced(root.left) && isBalanced(root.right));
        }
    }

    public int height(TreeNode root){
        if(root == null) return 0;
        else{
            return Math.max(height(root.left), height(root.right)) + 1;
        }
    }
}
