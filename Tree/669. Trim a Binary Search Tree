/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    /*
    Binary Search Tree

    Using recursion
    three situations:
        root > h remove root
        root < l remove root
        root >= l && root <= h
    */
    public TreeNode trimBST(TreeNode root, int low, int high) {
        if(root == null) return null;
        //in these two situations, no root, just keep the left or right tree
        if(root.val > high) return trimBST(root.left, low, high);
        if(root.val < low) return trimBST(root.right, low, high);
        //in this situation, we need to add newest child tree to root
        if(root.val >= low && root.val <= high){
            root.left = trimBST(root.left, low, high);
            root.right = trimBST(root.right, low, high);
        }
        return root;
    }
}
