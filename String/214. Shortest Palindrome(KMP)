#O(n)
#O(n)
class Solution:
    def shortestPalindrome(self, s: str) -> str:
        if s == s[::-1]: return s
        #we only need the common prefix of string and reverse string, so we should add a seperate sign between them, otherwise, the prefix may be too long
        """
        input = aabba
        reverse = abbaa
        if not add "*":
            a a b b a a b b a a
            |---------|
               prefix
                    |---------|
                       suffix
            nxt = 0 1 0 0 1 2 3 4 5 6 
        if add "*":
            a a b b a * a b b a a
            |-|
                              |-|
            nxt = [0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 2]
            this is correct
        """
        s_rev = s +'*'+s[::-1]
        
        nxt = self.getNext(s_rev)
        #longest common prefix
        longest = nxt[-1]
        addedString = s[longest:][::-1]
        return addedString + s
    #get next array
    def getNext(self, s):
        n = len(s)
        nxt = [0] * n
        for i in range(1, n):
            j = nxt[i-1]
            while j > 0 and s[j] != s[i]:
                j = nxt[j-1]
            if(s[j] == s[i]):
                j += 1
            nxt[i] = j
        return nxt
