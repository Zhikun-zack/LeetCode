class Solution {
    //Implementation of KMP Algorithm
    public int strStr(String haystack, String needle) {
        int lenN = needle.length();
        int lenH = haystack.length();
        if(lenN == 0){
            return 0;
        }
        int i = 0;
        int j = 0;
        int[] lps = new int[lenN];
        calLPS(lps,needle,lenN);
        /*
        for(int x = 0; x < lps.length; x++){
            System.out.println(lps[x]);
        }
        */
        while(i < lenH){
            if(haystack.charAt(i) == needle.charAt(j)){
                i++;
                j++;
            }
            if(j == lenN){
                //System.out.println(i);
                return i-j;
            }
            if(i<lenH && haystack.charAt(i) != needle.charAt(j)){
                if(j != 0){
                    i = i-lps[j-1];
                    j = 0;
                }
                else if(j == 0){
                    i = i+1;
                }
                
            }
        }
        
        
        return -1;
    }
    public void calLPS(int[] lps, String needle, int len){
        lps[0] = 0;
        int j = 0;
        int i = 1;
        while( i< len ){
            if(needle.charAt(i) == needle.charAt(j)){
                j++;  
                lps[i] = j;
                i++;
            }
            else {
                if(j != 0){
                    j = lps[j-1];
                }else{
                    lps[i] = j;
                    i++;
                }       
            }
        }
    }
}
