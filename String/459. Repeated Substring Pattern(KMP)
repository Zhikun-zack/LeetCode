#if the length of s minus longest length of prefix can be divided by length, mod is 0, then return True
class Solution:
    def repeatedSubstringPattern(self, s: str) -> bool:
        n = len(s)
        nxt = self.get_nxt(s)
        longest = nxt[-1]
        #If 0, which means n -longest' mod is 0 in any situation
        if longest == 0:
            return False
        return n % (n - longest) == 0 
    
    def get_nxt(self, s):
        n = len(s)
        nxt = [0] * n
        for i in range(1, n):
            j = nxt[i-1]
            while j > 0 and s[j] != s[i]:
                j = nxt[j-1]
            if (s[j] == s[i]):
                j += 1
            nxt[i] = j
        return nxt
