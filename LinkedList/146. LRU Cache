class DLinkedNode:
    def __init__(self, key = 0, value = 0):
        #Double linked so we need two edge
        self.next = None
        self.pre = None
        self.key = key
        self.val = value

class LRUCache:

    def __init__(self, capacity: int):
        #cache is a map to store the key-value pairs key is int and value is DLinkedNode
        self.cache = dict()
        #create dumy head and dumy tail
        self.head = DLinkedNode()
        self.tail = DLinkedNode()
        #Make these two nodes linked
        self.head.next = self.tail
        self.tail.pre = self.head
        # number of elements in cache, compare with capacity to find whether it is out of range
        self.size = 0
        self.capacity = capacity

    def get(self, key: int) -> int:
        if key not in self.cache:
            return -1
        node = self.cache[key]
        #move the used node to the first place in linkedlist
        self.moveToHead(node)
        return node.val

    def put(self, key: int, value: int) -> None:
        #if not contains the key, create a new node
        if key not in self.cache:
            node = DLinkedNode(key, value)
            self.cache[key] = node
            self.addToHead(node)
            self.size += 1
            if self.size > self.capacity:
                #if number of keys exceeds the capacity from this operation, remove the last one
                deletedNode = self.deleteTail()
                self.cache.pop(deletedNode.key)
                self.size -= 1
        #Update the value of key
        else:
            node = self.cache[key]
            node.val = value
            self.moveToHead(node)
                
    #Implementation of DoubleLinkedList
    def addToHead(self, node: DLinkedNode):
        node.next = self.head.next
        self.head.next.pre = node
        self.head.next = node
        node.pre = self.head
        
        
    def deleteNode(self, node: DLinkedNode):
        node.pre.next = node.next
        node.next.pre = node.pre
        
        
    def moveToHead(self, node: DLinkedNode):
        self.deleteNode(node)
        self.addToHead(node)
    
    def deleteTail(self):
        node = self.tail.pre
        self.deleteNode(node)
        return node
        
        


# Your LRUCache object will be instantiated and called as such:
# obj = LRUCache(capacity)
# param_1 = obj.get(key)
# obj.put(key,value)
