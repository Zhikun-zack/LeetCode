class Solution:
    #Meeting O(log) we can consider about the dichotomy 
#     find the min list 
#     calculate the middle index of the smaller list (A)
#     We know the length of half, so we just need using half subtract the middle index of A to calculate the index of B
#     compare the A[middle index] with B[index+1] and B[index] with A[middle + 1]
#     if A[] < b[+1] and B[] < A[+1]
#         which means the left part of A and left part of B are all belong to the left part of whole list
#         which means we have find the left part
#         we can remove these number 
#         and the result will exist in A[+1] and B[+1] we just need to find the smaller value of the two
#     if not
#         if A[] > B[+1]
#             which means left part of A contains some right part of whole list
#             Binary search, make the r pointer to middle index - 1
#         if B[] > A[+1]
#             which means left part of B contains some right part
#             we need to make left part of B less
#             But length of left B is calculate using half - middle A
#             So we can make middle A larger to make B smaller
#             So l pointer to middle index + 1
#     loop until find the final result
    
#     Boundary 
#     when all left part comes from A or B
#         When all from A
#             middle index of B will be -1, give -infinity to -1
#             middle index of A will be len(A) give infinity to len(A)
#         When all from B
#             middle index of B will be len(B), give infinity 
#             middle index of A will be -1, give -infinity

#Source: https://www.youtube.com/watch?v=q6IEA26hvXc
# T Com: O(Log(min(m,n)))
    def findMedianSortedArrays(self, nums1: List[int], nums2: List[int]) -> float:
        total = len(nums1) + len(nums2)
        half = total // 2
        A, B = nums1, nums2
        
        if len(A) > len(B):
            A, B = B, A
        
        l, r = 0, len(A)-1
        
        while True:
            i = (r + l) // 2
            # i range (0, n) j range(0, n) they all start from 0 not 1
            j = half - i - 2
            
            Aleft = A[i] if i >= 0 else float("-infinity")
            Aright = A[i+1] if (i+1) < len(A) else float("infinity")
            Bleft = B[j] if j >= 0 else float("-infinity")
            Bright = B[j+1] if (j+1) < len(B) else float("infinity")
            
            if Aleft <= Bright and Bleft <= Aright:
                #odd
                if total % 2:
                    return min(Aright, Bright)
                #even
                return (max(Aleft, Bleft) + min(Aright, Bright)) / 2
            elif Aleft > Bright:
                r = i - 1
            else:
                l = i + 1
