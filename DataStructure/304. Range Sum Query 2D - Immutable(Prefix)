class NumMatrix {
    /*
    Prefix

    calculate the sums first 
    then calculate the range sums that we want

    2-dimentional prefix
    res = sums[i2][j2] + sums[i1-1][j1-1] - sums[i1-1][j2] - sums[i2][j1-1];

    https://leetcode-cn.com/problems/range-sum-query-2d-immutable/solution/er-wei-qian-zhui-he-jian-dan-tui-dao-tu-sqekv/
    */
    int[][] sums;
    public NumMatrix(int[][] matrix) {
        int rlen = matrix.length, clen = matrix[0].length;
        sums = new int[rlen+1][clen + 1];
        for(int i = 1; i <= rlen; i++){
            for(int j = 1; j <= clen; j++){
                sums[i][j] = sums[i-1][j] + sums[i][j-1] - sums[i-1][j-1] + matrix[i-1][j-1];
            }
        }
    }
    public int sumRegion(int row1, int col1, int row2, int col2) {
        return sums[row2+1][col2+1] + sums[row1][col1] -sums[row2+1][col1] - sums[row1][col2+1];
    }
}

/**
 * Your NumMatrix object will be instantiated and called as such:
 * NumMatrix obj = new NumMatrix(matrix);
 * int param_1 = obj.sumRegion(row1,col1,row2,col2);
 */
